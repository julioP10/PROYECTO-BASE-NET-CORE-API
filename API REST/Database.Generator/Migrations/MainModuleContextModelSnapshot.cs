// <auto-generated />
using System;
using Infraestructure.Data.MainModule;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Database.Generator.Migrations
{
    [DbContext(typeof(MainModuleContext))]
    partial class MainModuleContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.MainModule.Entities.AccessRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FormActionId")
                        .HasColumnType("int");

                    b.Property<int?>("FormId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FormActionId");

                    b.HasIndex("FormId");

                    b.HasIndex("RoleId");

                    b.ToTable("AccessRoles");
                });

            modelBuilder.Entity("Domain.MainModule.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "AR",
                            Name = "ARGENTINA",
                            State = 1
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "BO",
                            Name = "BOLIVIA",
                            State = 1
                        },
                        new
                        {
                            Id = 3,
                            Abbreviation = "CL",
                            Name = "CHILE",
                            State = 1
                        },
                        new
                        {
                            Id = 4,
                            Abbreviation = "CO",
                            Name = "COLOMBIA",
                            State = 1
                        },
                        new
                        {
                            Id = 5,
                            Abbreviation = "CR",
                            Name = "COSTA RICA",
                            State = 1
                        },
                        new
                        {
                            Id = 6,
                            Abbreviation = "EC",
                            Name = "ECUADOR",
                            State = 1
                        },
                        new
                        {
                            Id = 7,
                            Abbreviation = "SV",
                            Name = "EL SALVADOR",
                            State = 1
                        },
                        new
                        {
                            Id = 8,
                            Abbreviation = "GT",
                            Name = "GUATEMALA",
                            State = 1
                        },
                        new
                        {
                            Id = 9,
                            Abbreviation = "MX",
                            Name = "MEXICO",
                            State = 1
                        },
                        new
                        {
                            Id = 10,
                            Abbreviation = "PA",
                            Name = "PANAMA",
                            State = 1
                        },
                        new
                        {
                            Id = 11,
                            Abbreviation = "PE",
                            Name = "PERU",
                            State = 1
                        },
                        new
                        {
                            Id = 12,
                            Abbreviation = "PR",
                            Name = "PUERTO RICO",
                            State = 1
                        },
                        new
                        {
                            Id = 13,
                            Abbreviation = "DO",
                            Name = "REPUBLICA DOMINICANA",
                            State = 1
                        },
                        new
                        {
                            Id = 14,
                            Abbreviation = "EU",
                            Name = "UNITED STATES",
                            State = 1
                        },
                        new
                        {
                            Id = 15,
                            Abbreviation = "VE",
                            Name = "VENEZUELA",
                            State = 1
                        });
                });

            modelBuilder.Entity("Domain.MainModule.Entities.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("ResourceKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Forms");
                });

            modelBuilder.Entity("Domain.MainModule.Entities.FormAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("FormActions");
                });

            modelBuilder.Entity("Domain.MainModule.Entities.Orchestration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Orchestrations");
                });

            modelBuilder.Entity("Domain.MainModule.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Perfil con el acceso total al sistema",
                            Name = "Administrador",
                            State = 1
                        });
                });

            modelBuilder.Entity("Domain.MainModule.Entities.ScalingMatrix", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ScallingMatrices");
                });

            modelBuilder.Entity("Domain.MainModule.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuthenticationMode")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool>("IsSuperuser")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthenticationMode = 1,
                            FirstName = "admin",
                            IsSuperuser = true,
                            LastName = "admin",
                            Password = "Qm6u5yaNAZnx2wwYrGpyFw==",
                            State = 1,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("Domain.MainModule.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Domain.MainModule.Entities.UserScalingMatrix", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("ScalingMatrixId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("Tolerance")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScalingMatrixId");

                    b.HasIndex("UserId");

                    b.ToTable("UserScalingMatrix");
                });

            modelBuilder.Entity("Domain.MainModule.Entities.Version", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("OrchestrationDetails")
                        .IsRequired()
                        .HasColumnType("xml");

                    b.Property<int>("OrchestrationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrchestrationId");

                    b.ToTable("Versions");
                });

            modelBuilder.Entity("Domain.MainModule.Entities.AccessRole", b =>
                {
                    b.HasOne("Domain.MainModule.Entities.FormAction", "FormAction")
                        .WithMany("AccessRoles")
                        .HasForeignKey("FormActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.MainModule.Entities.Form", null)
                        .WithMany("AccessRoles")
                        .HasForeignKey("FormId");

                    b.HasOne("Domain.MainModule.Entities.Role", "Role")
                        .WithMany("AccessRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.MainModule.Entities.Form", b =>
                {
                    b.HasOne("Domain.MainModule.Entities.Form", "ParentNavigation")
                        .WithMany("ChildsNavigation")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Domain.MainModule.Entities.FormAction", b =>
                {
                    b.HasOne("Domain.MainModule.Entities.Form", "Form")
                        .WithMany("FormActions")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.MainModule.Entities.Orchestration", b =>
                {
                    b.HasOne("Domain.MainModule.Entities.Country", "Country")
                        .WithMany("Orchestrations")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("Domain.MainModule.Entities.UserRole", b =>
                {
                    b.HasOne("Domain.MainModule.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.MainModule.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.MainModule.Entities.UserScalingMatrix", b =>
                {
                    b.HasOne("Domain.MainModule.Entities.ScalingMatrix", "ScalingMatrix")
                        .WithMany("UserScalingMatrix")
                        .HasForeignKey("ScalingMatrixId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.MainModule.Entities.User", "User")
                        .WithMany("UserScalingMatrix")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.MainModule.Entities.Version", b =>
                {
                    b.HasOne("Domain.MainModule.Entities.Orchestration", "Orchestration")
                        .WithMany("Versions")
                        .HasForeignKey("OrchestrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
